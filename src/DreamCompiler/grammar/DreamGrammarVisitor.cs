//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\repos\GitHub\DReAM\src\\DreamCompiler\grammar\DreamGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DreamCompiler.Grammar {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="DreamGrammarParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IDreamGrammarVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompileUnit([NotNull] DreamGrammarParser.CompileUnitContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.classifications"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClassifications([NotNull] DreamGrammarParser.ClassificationsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] DreamGrammarParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.endLine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEndLine([NotNull] DreamGrammarParser.EndLineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.semiColon"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSemiColon([NotNull] DreamGrammarParser.SemiColonContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] DreamGrammarParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] DreamGrammarParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] DreamGrammarParser.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.funcName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncName([NotNull] DreamGrammarParser.FuncNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.returnValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnValue([NotNull] DreamGrammarParser.ReturnValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.leftParen"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLeftParen([NotNull] DreamGrammarParser.LeftParenContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.rightParen"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRightParen([NotNull] DreamGrammarParser.RightParenContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.booleanExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanExpression([NotNull] DreamGrammarParser.BooleanExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.primitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitives([NotNull] DreamGrammarParser.PrimitivesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.command"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCommand([NotNull] DreamGrammarParser.CommandContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.userDefinedTypeDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUserDefinedTypeDecl([NotNull] DreamGrammarParser.UserDefinedTypeDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.userDefinedTypeKeyWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUserDefinedTypeKeyWord([NotNull] DreamGrammarParser.UserDefinedTypeKeyWordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.userDefinedTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUserDefinedTypeName([NotNull] DreamGrammarParser.UserDefinedTypeNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] DreamGrammarParser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclaration([NotNull] DreamGrammarParser.VariableDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.userDefinedTypeVariableDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUserDefinedTypeVariableDecl([NotNull] DreamGrammarParser.UserDefinedTypeVariableDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.userDefinedTypeVariableReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUserDefinedTypeVariableReference([NotNull] DreamGrammarParser.UserDefinedTypeVariableReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.userDefinedTypeFunctionReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUserDefinedTypeFunctionReference([NotNull] DreamGrammarParser.UserDefinedTypeFunctionReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.add"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdd([NotNull] DreamGrammarParser.AddContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.summation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSummation([NotNull] DreamGrammarParser.SummationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.subtract"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubtract([NotNull] DreamGrammarParser.SubtractContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.subtraction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubtraction([NotNull] DreamGrammarParser.SubtractionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiply([NotNull] DreamGrammarParser.MultiplyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.multiplication"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplication([NotNull] DreamGrammarParser.MultiplicationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.breakKeyWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakKeyWord([NotNull] DreamGrammarParser.BreakKeyWordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.divide"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivide([NotNull] DreamGrammarParser.DivideContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.division"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivision([NotNull] DreamGrammarParser.DivisionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.modulo"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModulo([NotNull] DreamGrammarParser.ModuloContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.moduli"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModuli([NotNull] DreamGrammarParser.ModuliContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.types"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypes([NotNull] DreamGrammarParser.TypesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.primitiveTypes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveTypes([NotNull] DreamGrammarParser.PrimitiveTypesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.numericTypes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumericTypes([NotNull] DreamGrammarParser.NumericTypesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.equalsign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualsign([NotNull] DreamGrammarParser.EqualsignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonOperator([NotNull] DreamGrammarParser.ComparisonOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryOperator([NotNull] DreamGrammarParser.UnaryOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.bitWiseOperators"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitWiseOperators([NotNull] DreamGrammarParser.BitWiseOperatorsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.equalequal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualequal([NotNull] DreamGrammarParser.EqualequalContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.lessthan"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessthan([NotNull] DreamGrammarParser.LessthanContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.greaterthan"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterthan([NotNull] DreamGrammarParser.GreaterthanContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.lessthanorequalto"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessthanorequalto([NotNull] DreamGrammarParser.LessthanorequaltoContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.greaterthanorequalto"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterthanorequalto([NotNull] DreamGrammarParser.GreaterthanorequaltoContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.booleanAndOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanAndOperator([NotNull] DreamGrammarParser.BooleanAndOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.booleanOrOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanOrOperator([NotNull] DreamGrammarParser.BooleanOrOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.notOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotOperator([NotNull] DreamGrammarParser.NotOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.bitAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitAnd([NotNull] DreamGrammarParser.BitAndContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.bitOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitOr([NotNull] DreamGrammarParser.BitOrContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.bitXor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitXor([NotNull] DreamGrammarParser.BitXorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.bitNot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitNot([NotNull] DreamGrammarParser.BitNotContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.bitLeftShift"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitLeftShift([NotNull] DreamGrammarParser.BitLeftShiftContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.bitRigthShift"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitRigthShift([NotNull] DreamGrammarParser.BitRigthShiftContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.keywords"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeywords([NotNull] DreamGrammarParser.KeywordsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.ifExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfExpr([NotNull] DreamGrammarParser.IfExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.whileExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileExpression([NotNull] DreamGrammarParser.WhileExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.doWhileExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoWhileExpr([NotNull] DreamGrammarParser.DoWhileExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.userDefinedTypeResolutionOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUserDefinedTypeResolutionOperator([NotNull] DreamGrammarParser.UserDefinedTypeResolutionOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionSequence([NotNull] DreamGrammarParser.ExpressionSequenceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierName([NotNull] DreamGrammarParser.IdentifierNameContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTernaryExpression([NotNull] DreamGrammarParser.TernaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreIncrementExpression([NotNull] DreamGrammarParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInExpression([NotNull] DreamGrammarParser.InExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] DreamGrammarParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreDecreaseExpression([NotNull] DreamGrammarParser.PreDecreaseExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionCallExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallExpression([NotNull] DreamGrammarParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitThisExpression([NotNull] DreamGrammarParser.ThisExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryMinusExpression([NotNull] DreamGrammarParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BinaryExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryExpression([NotNull] DreamGrammarParser.BinaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeofExpression([NotNull] DreamGrammarParser.TypeofExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInstanceofExpression([NotNull] DreamGrammarParser.InstanceofExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryPlusExpression([NotNull] DreamGrammarParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeleteExpression([NotNull] DreamGrammarParser.DeleteExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualityExpression([NotNull] DreamGrammarParser.EqualityExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitShiftExpression([NotNull] DreamGrammarParser.BitShiftExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesizedExpression([NotNull] DreamGrammarParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitNotExpression([NotNull] DreamGrammarParser.BitNotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>VariableDeclarationExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclarationExpression([NotNull] DreamGrammarParser.VariableDeclarationExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpression([NotNull] DreamGrammarParser.LiteralExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberDotExpression([NotNull] DreamGrammarParser.MemberDotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>VariableExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableExpression([NotNull] DreamGrammarParser.VariableExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberIndexExpression([NotNull] DreamGrammarParser.MemberIndexExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitAndExpression([NotNull] DreamGrammarParser.BitAndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentOperatorExpression([NotNull] DreamGrammarParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="DreamGrammarParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVoidExpression([NotNull] DreamGrammarParser.VoidExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Evaluatable</c>
	/// labeled alternative in <see cref="DreamGrammarParser.evaluatableExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEvaluatable([NotNull] DreamGrammarParser.EvaluatableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.assignmentExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentExpression([NotNull] DreamGrammarParser.AssignmentExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.reassignmentExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReassignmentExpression([NotNull] DreamGrammarParser.ReassignmentExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.assignmentOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentOperator([NotNull] DreamGrammarParser.AssignmentOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DreamGrammarParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] DreamGrammarParser.LiteralContext context);
}
} // namespace DreamCompiler.Grammar
